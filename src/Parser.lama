-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
<<<<<<< HEAD
fun error (msg, loc) {
=======
public fun error (msg, loc) {
>>>>>>> upstream/A07-scopes-functions-int
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")
<<<<<<< HEAD
=======
--   Weak --- works like Val, but allows to provide a "default" value for void constructs
>>>>>>> upstream/A07-scopes-functions-int

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, val, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (val)
  | _    -> val
  esac
}

<<<<<<< HEAD
=======
-- Checks if a void epxression can be used in the context described by
-- the attribute "atr".
>>>>>>> upstream/A07-scopes-functions-int
fun assertVoid (atr, val, loc) {
  case atr of
    Void -> val
  | Val  -> error ("value expected", loc)
<<<<<<< HEAD
=======
  | Weak -> Seq (val, Const (0))
>>>>>>> upstream/A07-scopes-functions-int
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

<<<<<<< HEAD

=======
-- A helper function to be used with super-combinator "expr"
>>>>>>> upstream/A07-scopes-functions-int
fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

<<<<<<< HEAD
local elifParser = memo $ eta syntax (kElse st=exp {st}|
                                      kElif e=exp kThen st1=exp st2=elifParser {fun(a) { If(e(Var), st1(a), st2(a))}});

local primary  = memo $ eta syntax (
                                    -- decimal constant
                                    loc=pos x=decimal                                 {fun (a) {assertValue (a, Const (stringInt (x)), loc)}}     |

                                    -- identifier
                                    x=lident                                          {fun (a) {
                                                                                         case a of
                                                                                           Ref  -> Ref (x)
                                                                                         | Void -> Ignore (Var (x))
                                                                                         | _    -> Var (x)
                                                                                         esac
                                                                                      }} |
                                    inbr[s ("("), exp, s (")")]	                             |	        
			loc=pos kRead x=inbr[s("("), lident, s(")")]         	  { fun (a) { assertVoid(a, Read(x),       loc) }} 			 |
			loc=pos kWrite x=inbr[s("("), exp, s(")")]         		  { fun (a) { assertVoid(a, Write(x(Val)), loc) }} 			 |
			loc=pos kWhile e=exp kDo x=exp kOd             			  { fun (a) { assertVoid(a, While(e(Val), x(Void)), loc) }}	 |
			loc=pos kIf e=exp kThen x=exp y=elifParser kFi 			  { fun(a) { If(e(Var), x(a), y(a))} }                  	 |
			loc=pos kIf e=exp kThen x=exp kFi           			{ fun(a) { assertVoid(a, If(e(Var), x(Void), Skip), loc)}}	|
			loc=pos kRepeat x=exp kUntil e=inbr[s("("), exp, s(")")]  { fun (a) { assertVoid(a, Repeat(x(Void), e(Val)), loc) }} |
			loc=pos kSkip									          { fun (a) { assertVoid(a, Skip, loc) }} 					 |
			loc=pos kFor x=exp s[","] e=exp s[","] y=exp kDo z=exp kOd { fun (a) { assertVoid(a, Seq(x(Void), While(e(Val), Seq(z(Void), y(Void)))), loc) }}	 |
			loc=pos kRead x=inbr[s("("), lident, s(")")]         	  { fun (a) { assertVoid(a, Read(x),       loc) }}
			),
      basic    = memo $ eta (expr ({[Right, singleton ([s (":="),
                                                        fun (l, loc, r) {
                                                          fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                                        }])],
                                    [Left , map (binop, singleton ("!!"))],
                                    [Left , map (binop, singleton ("&&"))],
                                    [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                    [Left , map (binop, {"+", "-"})],
                                    [Left , map (binop, {"*", "/", "%"})]
                                   },
                                   primary)),
      exp      = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});

-- Public top-level parser
public parse = syntax (s=exp {s (Void)});
=======
-- Helper parser: parses a (possible empty) list of items separated by ","
fun list0 (item) {
  list0By (item, s(","))
}

-- Helper parser: parses a non-empty list of items separated by ","
fun list (item) {
  listBy (item, s(","))
}

-- Helper AST function: expands a "raw" scope expression, reifying
-- initializers into assignments
fun expandScope (defs, expr) {
  fun expandDefs (defs, expr) {
    foldr (fun ([defs, expr], def) {     
             case def of
                [ident, None]         -> [ident : defs, expr]
             |  [ident, Some (value)] -> [ident : defs, Seq (Ignore (Assn (Ref (ident), value)), expr)]
             esac
           },
           [{}, expr],
           defs)
  }

  case 
    foldr (fun ([defs, expr], def) {
             case def of
               f@Fun (_, _, _) -> [f : defs, expr]
             | Local (ds)      ->
                 case expandDefs (ds, expr) of
                   [ds, expr] -> [Local (ds) : defs, expr]
                 esac
             esac
           },
           [{}, expr],
           defs) of
    [defs, expr] -> Scope (defs, expr)
  esac  
}

-- Helper AST function: distributes a scope through an expression
fun distributeScope (expr, exprConstructor) {
  case expr of
    Scope (defs, sexpr) -> Scope (defs, exprConstructor (sexpr))
  | _                   -> exprConstructor (expr)
  esac
}

local primary    = memo $ eta syntax (
                                      -- decimal constant
                                      loc=pos x=decimal                                 {fun (a) {assertValue (a, Const (stringInt (x)), loc)}}     |

                                      -- identifier
                                      x=lident args=inbr[s("("), list0(syntax(e=exp {e(Val)})), s(")")]? {fun (a) {
                                                                                                            case args of
                                                                                                              None -> case a of
                                                                                                                        Ref  -> Ref (x)
                                                                                                                      | Void -> Ignore (Var (x))
                                                                                                                      | _    -> Var (x)
                                                                                                                      esac
                                                                                                            | Some (args) -> assertValue (a, Call (x, args))
                                                                                                            esac
                                                                                                         }} |
(* Assignment *)
                                      $(failure ("the rest of primary parsing in not implemented\n"))),
      scopeExpr = memo $ eta (syntax ($(failure ("scope expression parsing is not implemented\n")))),
(* End *)
      basic      = memo $ eta (expr ({[Right, singleton ([s (":="),
                                                          fun (l, loc, r) {
                                                            fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                                          }])],
                                      [Left , map (binop, singleton ("!!"))],
                                      [Left , map (binop, singleton ("&&"))],
                                      [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                      [Left , map (binop, {"+", "-"})],
                                      [Left , map (binop, {"*", "/", "%"})]
                                     },
                                     primary)),
      exp        = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});

-- Public top-level parser
public parse = syntax (s=scopeExpr {s (Void)});
>>>>>>> upstream/A07-scopes-functions-int
