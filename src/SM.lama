-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

fun computeExpr (oper, s1, s2) {
  case oper of
     "+"  -> s1 + s2
  |  "*"  -> s1 * s2
  |  "-"  -> s1 - s2
  |  "/"  -> s1 / s2
  |  "%"  -> s1 % s2
  |  "==" -> s1 == s2
  |  "!=" -> s1 != s2
  |  "<"  -> s1 < s2
  |  "<=" -> s1 <= s2
  |  ">"  -> s1 > s2
  |  ">=" -> s1 >= s2
  |  "&&" -> s1 && s2
  |  "!!" -> s1 !! s2
  esac
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

fun evalStep (env, c, insns) {
    case insns[0] of
      READ           -> local reader = readWorld(c[2]); [singleton(reader[0]) +++ c[0], c[1], reader[1]]
      |  WRITE       -> [c[0][1], c[1], writeWorld(c[0][0], c[2])]
      |  BINOP(s1)   -> [singleton(computeExpr(s1,c[0][1][0],c[0][0])) +++ c[0][1][1], c[1], c[2]]
      |  CONST(n)    -> [singleton(n) +++ c[0], c[1], c[2]]
      |  LD(x)       -> [singleton(c[1](x)) +++ c[0], c[1], c[2]]
      |  ST(x)       -> [c[0][1], c[1] <- [x, c[0][0]], c[2]]
    esac
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c, insns) {
  while size(insns) > 0 do
    c := evalStep(env, c, insns);
    insns := insns[1]
  od;
  c
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
   Var(s1)           -> singleton(LD(s1))
   | Const(s1)       -> singleton(CONST(s1))
   | Binop(s1,s2,s3) -> compileExpr(s2) +++ compileExpr(s3) +++ singleton(BINOP(s1))
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
   Seq(s1,s2)        -> compileSM(s1) +++ compileSM(s2)
   | Write(s1)       -> compileExpr(s1) +++ singleton(WRITE)
   | Read(s1)        -> singleton(READ) +++ singleton(ST(s1))
   | Assn(s1,s2)     -> compileExpr(s2) +++ singleton(ST(s1))
  esac
}
