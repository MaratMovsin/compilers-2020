-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
public fun evalExpr (st, expr) {
  case expr of
     Var(s1) -> st(s1)
  |  Binop(s1,s2,s3)   -> case s1 of
       "+"   -> (evalExpr(st, s2) + evalExpr(st, s3))
    |  "*"  -> (evalExpr(st, s2) * evalExpr(st, s3))
    |  "-"  -> (evalExpr(st, s2) - evalExpr(st, s3))
    |  "/"  -> (evalExpr(st, s2) / evalExpr(st, s3))
    |  "%"  -> (evalExpr(st, s2) % evalExpr(st, s3))
    |  "==" -> (evalExpr(st, s2) == evalExpr(st, s3))
    |  "!=" -> (evalExpr(st, s2) != evalExpr(st, s3))
    |  "<"  -> (evalExpr(st, s2) < evalExpr(st, s3))
    |  "<=" -> (evalExpr(st, s2) <= evalExpr(st, s3))
    |  ">"  -> (evalExpr(st, s2) > evalExpr(st, s3))
    |  ">=" -> (evalExpr(st, s2) == evalExpr(st, s3))
    |  "&&" -> (evalExpr(st, s2) && evalExpr(st, s3))
    |  "!!" -> (evalExpr(st, s2) !! evalExpr(st, s3))
    esac
  |  Const(s1)  -> s1
  esac
}
