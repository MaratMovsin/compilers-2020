-- Expression evaluator

import List;
import State;
import World;
<<<<<<< HEAD
=======
import Lexer;
import Parser;
>>>>>>> upstream/A07-scopes-functions-int

-- As association map which maps "\otimes" into "\oplus"
local ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
<<<<<<< HEAD
-- expr = Assn   (expr, expr)         |
=======
-- expr = Assn   (string, expr)       |
>>>>>>> upstream/A07-scopes-functions-int
--        Seq    (expr, expr)         |
--        Skip                        |
--        Read   (string)             |
--        Write  (expr)               |
--        if     (expr, expr, expr)   |
--        While  (expr, expr)         |
--        Repeat (expr, expr)         |
--        Var    (string)             |
--        Ref    (string)             |
--        Const  (int)                |
--        Binop  (string, expr, expr) |
<<<<<<< HEAD
--        Ignore (expr)

=======
--        Scope  (def list, expr)     |
--        Call   (string, expr list)  |
--        Ignore (expr)
--
-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Local (string list)                |
--       Fun   (string, string list, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
>>>>>>> upstream/A07-scopes-functions-int
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, val] -> [c, val : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

<<<<<<< HEAD
fun eval (c@[s, w], expr) {
  --if compare(expr.string,"If()") skip
  --else printf("%s\n",expr.string)
  --fi;
  case expr of
    Assn(l, r) -> case evalList(c, {l, r}) of
		[[s1, w1], {Ref(x), a}] -> [[s1 <- [x, a], w1], a]
	esac
    |Seq(expr1, expr2) -> case eval(c, expr1) of
        [c1, rubbish] -> eval(c1, expr2)
    esac
    |Skip -> [c, None]
    |Read(val) -> local reader = readWorld(w); [[s <- [val, reader[0]], reader[1]], None]
    |Write(expr1) -> case eval(c, expr1) of
        [[s1, w1], a] -> [[s1, writeWorld(a, w)], None]
    esac
    |If(expr1, expr2, expr3) -> case eval(c,expr1) of
        [c1, b] -> if(b) then eval(c1, expr2) else eval(c1, expr3) fi
    esac
    |While(expr1, expr2) -> case eval(c, expr1) of
        [c1, b] -> if(b) then case eval(c1, expr2) of
            [c2, rubbish] -> eval(c2, While(expr1, expr2))
        esac
        else [c1, None] fi
        |x -> printf("%s\n",expr1.string); [c,0]
    esac
    |Repeat (expr1, expr2) -> case eval(c,expr1) of
        [c1, rubbish] -> case eval(c1, expr2) of
            [c2, b] -> if(b) then [c2, None] else eval(c2, Repeat(expr1, expr2)) fi
        esac
    esac
    |Var(str) -> [c, s(str)]
    |Ref(str) -> [c, Ref(str)]
    |Const(n) -> [c, n]
    |Binop  (op, expr1, expr2) -> case eval(c, expr1) of
        [c1, l] -> case eval(c1, expr2) of
            [c2, r] -> [c2, evalOp(op, l, r)]
        esac
    esac
    |Ignore(expr1) -> case eval(c, expr1) of
        [c1, rubbish] -> [c1, None]
    esac
    |_ -> printf("?!?!\n")
    esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
=======
(* Assignment *)
fun eval (c@[s, w], expr) {
  failure ("evalExpr not implemented\n")
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
>>>>>>> upstream/A07-scopes-functions-int
